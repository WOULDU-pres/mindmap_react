import React from 'react';
import './Issue1.css';

function Issue1() {
  return (
    <div className="issue1">
      <h2>Issue 1: Connecting Nodes with Curved Lines</h2>
      <p>
        이 프로젝트를 시작할 때 주요 과제 중 하나는 곡선으로 노드를 연결하는
        우아한 방법을 찾는 것이라고 생각했습니다. 시각적으로 매력적이고
        직관적으로 연결되기를 바랐지만, 처음에 생각했던 것보다 이를 달성하는
        것이 더 어려웠습니다.
      </p>

      <h3>First Attempt: Using SVG Elements</h3>
      <p>
        첫 번째 접근 방식은 SVG 요소를 사용하여 곡선을 그리는 것이었습니다.
        곡선을 포함한 복잡한 모양을 만들 수 있는 SVG '경로' 요소로 실험해
        보았습니다. 'd' 속성을 사용하여 베지어 곡선의 시작점, 끝점 및 제어점을
        정의해 보았습니다. 이 방법을 사용하면 곡선을 만들 수 있었지만 시각적으로
        매력적인 방식으로 노드를 연결하는 부드러운 곡선을 만들 수 있는 올바른
        제어점을 찾는 것이 어려웠습니다. 꽤 오랜 시간 동안 제어점을 조정하고
        다양한 커브 유형을 실험했지만 결과에 완전히 만족할 수는 없었습니다.{' '}
      </p>

      <h3>Second Attempt: Using Canvas</h3>
      <p>
        SVG 요소로 어려움을 겪은 후 HTML5 캔버스를 사용해보기로 했습니다.
        캔버스를 사용하면 자바스크립트를 사용하여 커스텀 드로잉을 만들 수 있어
        곡선의 모양을 더 유연하게 제어할 수 있었습니다. 먼저 캔버스 요소를
        만들고 `quadraticCurveTo()` 및 `bezierCurveTo()` 메서드를 사용하여
        커브를 그렸습니다. 이 접근 방식을 사용하면 더 부드러운 곡선을 만들 수
        있었지만 노드 간에 시각적으로 매력적인 연결을 만들기 위한 올바른
        제어점을 찾는 데 여전히 어려움을 겪었습니다.
      </p>

      <h3>Final Solution: Algorithmic Control Points</h3>
      <p>
        연구 끝에 노드의 위치를 기반으로 부드러운 베지어 곡선을 위한 제어점을
        자동으로 계산할 수 있는 알고리즘을 발견했습니다. 이 접근 방식은 수동으로
        조정할 필요가 없었고 최소한의 노력으로 시각적으로 매력적인 커브를 만들
        수 있었습니다. 저는 이 알고리즘을 `connection.js` 파일에 구현했고 마침내
        만족스러운 결과를 얻을 수 있었습니다.
      </p>

      <p>
        결론적으로 곡선으로 노드를 연결하는 작업은 도전적이었지만 보람 있는
        경험이었습니다. SVG 요소, HTML5 캔버스, 베지어 곡선에 대해 많은 것을
        배웠습니다. 올바른 솔루션을 찾기까지 시행착오가 있었지만 최종 결과물이
        자랑스럽고 프로젝트의 사용자 경험을 크게 향상시켰다고 생각합니다.{' '}
      </p>
    </div>
  );
}

export default Issue1;
